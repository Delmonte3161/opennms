<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0" xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.1.0"
    xmlns:camel="http://camel.apache.org/schema/blueprint"
    xsi:schemaLocation="
        http://www.osgi.org/xmlns/blueprint/v1.0.0
        http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
        
        http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0
        http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd
        
        http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.1.0
        http://aries.apache.org/schemas/blueprint-ext/blueprint-ext-1.1.xsd

        http://camel.apache.org/schema/blueprint
        http://camel.apache.org/schema/blueprint/camel-blueprint-2.14.1.xsd
">

    <!-- Configuration properties -->
    <cm:property-placeholder id="kafkaEventForwarderProperties" persistent-id="org.opennms.features.kafka.eventforwarder.osgi"
        update-strategy="reload">
        <cm:default-properties>
            <cm:property name="logAllEvents" value="false" />
            <cm:property name="logEventDescription" value="false" />
            <cm:property name="cache_max_ttl" value="0" /> <!-- set to zero to disable TTL -->
            <cm:property name="cache_max_size" value="10000" /> <!-- set to zero to disable max size -->
            <cm:property name="concurrentConsumers" value="4" />
            <cm:property name="queueSize" value="1000" />
            <cm:property name="queueTimeout" value="0" /> <!-- Disable timeout by default -->
            <cm:property name="blockWhenFull" value="true" />
            <cm:property name="topic" value="fast-messages" />
            <cm:property name="kafkaForwarderEvents" value="uei.opennms.org/KafkaTestEvent/OK,uei.opennms.org/syslogd/user/Info" />
        </cm:default-properties>
    </cm:property-placeholder>

    <bean id="eventListener" class="org.opennms.features.kafka.eventforwarder.KafkaForwardingEventListener" init-method="init"
        destroy-method="destroy">
        <property name="eventIpcManager" ref="eventIpcManager" />
        <property name="eventForwarder" ref="eventForwarder" />
        <property name="logAllEvents" value="${logAllEvents}" />
        <property name="kafkaForwarderEvents" value="${kafkaForwarderEvents}" />
    </bean>

    <reference id="alarmDao" interface="org.opennms.netmgt.dao.api.AlarmDao" availability="mandatory" />
    <reference id="eventIpcManager" interface="org.opennms.netmgt.events.api.EventIpcManager" availability="mandatory" />
    <reference id="nodeDao" interface="org.opennms.netmgt.dao.api.NodeDao" availability="mandatory" />
    <reference id="transactionOperations" interface="org.springframework.transaction.support.TransactionOperations"
        availability="mandatory" />
    <reference id="configAdmin" interface="org.osgi.service.cm.ConfigurationAdmin" />


    <!-- Eventforwarder that sends the incoming OnmsEvent to a camel route for further enrichment of the event -->
    <bean id="eventForwarder" class="org.opennms.features.kafka.eventforwarder.internal.EventForwarder">
        <argument value="seda:kafkaForwardEvent?size=${queueSize}&amp;timeout=${queueTimeout}&amp;blockWhenFull=${blockWhenFull}" />
    </bean>

    <bean id="nodeDataCache" class="org.opennms.features.kafka.eventforwarder.internal.NodeCache" init-method="init">
        <property name="nodeDao" ref="nodeDao" />
        <property name="transactionOperations" ref="transactionOperations" />
        <property name="MAX_TTL" value="${cache_max_ttl}" />
        <property name="MAX_SIZE" value="${cache_max_size}" />
    </bean>

    <bean id="eventEnricher" class="org.opennms.features.kafka.eventforwarder.internal.EventEnricher">
        <property name="cache" ref="nodeDataCache" />
        <property name="alarmDao" ref="alarmDao" />
        <property name="transactionOperations" ref="transactionOperations" />
    </bean>

    <!-- KafkaEventProducer initialization -->
    <bean id="kafkaEventProducer" class="org.opennms.features.kafka.eventforwarder.internal.KafkaEventProducer"
        init-method="init">
        <property name="configAdmin" ref="configAdmin" />
        <property name="topic" value="${topic}" />
    </bean>

    <!-- ************************************** Camel Context ************************************** -->

    <camelContext autoStartup="true" id="kafkaEventForwarder" xmlns="http://camel.apache.org/schema/blueprint">

        <propertyPlaceholder id="properties" location="blueprint:kafkaEventForwarderProperties" />

        <onException>
            <exception>java.lang.Exception</exception>
            <redeliveryPolicy maximumRedeliveries="10" delayPattern="2:30000;4:60000;6:120000" />
        </onException>

        <route id="eventsFromOpennms" autoStartup="true" startupOrder="1">
            <from uri="seda:kafkaForwardEvent?concurrentConsumers={{concurrentConsumers}}&amp;size={{queueSize}}" />
            <to uri="seda:KAFKA_PRE?size={{queueSize}}&amp;timeout={{queueTimeout}}&amp;blockWhenFull={{blockWhenFull}}" />
        </route>

        <route id="enrichOpennmsEvents" autoStartup="true" startupOrder="2">
            <from uri="seda:KAFKA_PRE?concurrentConsumers={{concurrentConsumers}}&amp;size={{queueSize}}" />
            <bean ref="eventEnricher" method="process" />
            <to uri="seda:KAFKA?size={{queueSize}}&amp;timeout={{queueTimeout}}&amp;blockWhenFull={{blockWhenFull}}" />
        </route>

        <route id="eventsToKafka" autoStartup="true" startupOrder="3">
            <from uri="seda:KAFKA?size={{queueSize}}&amp;timeout={{queueTimeout}}&amp;blockWhenFull={{blockWhenFull}}" />
            <bean ref="kafkaEventProducer" method="dispatch" />
        </route>

    </camelContext>

</blueprint>
